
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001d34  08001d34  00011d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d54  08001d54  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001d54  08001d54  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d54  08001d54  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d58  08001d58  00011d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000020  08001d7c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001d7c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000822e  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158c  00000000  00000000  00028277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00029808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016387  00000000  00000000  0002aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b82  00000000  00000000  00040db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d05  00000000  00000000  0004a939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc63e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000cc694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d1c 	.word	0x08001d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08001d1c 	.word	0x08001d1c

0800014c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000186:	bf00      	nop
     __ASM volatile ("NOP");
 8000188:	bf00      	nop
  __ASM volatile ("NOP");
 800018a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
  }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80001b4:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <DWT_Delay_us+0x40>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80001ba:	f001 fabd 	bl	8001738 <HAL_RCC_GetHCLKFreq>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <DWT_Delay_us+0x44>)
 80001c2:	fba2 2303 	umull	r2, r3, r2, r3
 80001c6:	0c9b      	lsrs	r3, r3, #18
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	fb02 f303 	mul.w	r3, r2, r3
 80001ce:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80001d0:	bf00      	nop
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <DWT_Delay_us+0x40>)
 80001d4:	685a      	ldr	r2, [r3, #4]
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	1ad2      	subs	r2, r2, r3
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d3f8      	bcc.n	80001d2 <DWT_Delay_us+0x26>
}
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	e0001000 	.word	0xe0001000
 80001f0:	431bde83 	.word	0x431bde83

080001f4 <stepFullDrive>:

char fullDriveTable[4][4] = {{1, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 1}, {1, 0, 0, 1}};

size_t tableSize = 4;

void stepFullDrive(int steps, uint16_t delay){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	807b      	strh	r3, [r7, #2]
	for (int s = 0; s < steps; s++){
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e038      	b.n	8000278 <stepFullDrive+0x84>
		for (int i = 0; i < tableSize; i++){
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e02d      	b.n	8000268 <stepFullDrive+0x74>
			HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, fullDriveTable[i][0]);
 800020c:	4a1f      	ldr	r2, [pc, #124]	; (800028c <stepFullDrive+0x98>)
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000214:	461a      	mov	r2, r3
 8000216:	2140      	movs	r1, #64	; 0x40
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <stepFullDrive+0x9c>)
 800021a:	f000 feaa 	bl	8000f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, fullDriveTable[i][1]);
 800021e:	4a1b      	ldr	r2, [pc, #108]	; (800028c <stepFullDrive+0x98>)
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	009b      	lsls	r3, r3, #2
 8000224:	4413      	add	r3, r2
 8000226:	785b      	ldrb	r3, [r3, #1]
 8000228:	461a      	mov	r2, r3
 800022a:	2120      	movs	r1, #32
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <stepFullDrive+0x9c>)
 800022e:	f000 fea0 	bl	8000f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, fullDriveTable[i][2]);
 8000232:	4a16      	ldr	r2, [pc, #88]	; (800028c <stepFullDrive+0x98>)
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	789b      	ldrb	r3, [r3, #2]
 800023c:	461a      	mov	r2, r3
 800023e:	2110      	movs	r1, #16
 8000240:	4813      	ldr	r0, [pc, #76]	; (8000290 <stepFullDrive+0x9c>)
 8000242:	f000 fe96 	bl	8000f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, fullDriveTable[i][3]);
 8000246:	4a11      	ldr	r2, [pc, #68]	; (800028c <stepFullDrive+0x98>)
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	4413      	add	r3, r2
 800024e:	78db      	ldrb	r3, [r3, #3]
 8000250:	461a      	mov	r2, r3
 8000252:	2108      	movs	r1, #8
 8000254:	480e      	ldr	r0, [pc, #56]	; (8000290 <stepFullDrive+0x9c>)
 8000256:	f000 fe8c 	bl	8000f72 <HAL_GPIO_WritePin>
			DWT_Delay_us(delay);
 800025a:	887b      	ldrh	r3, [r7, #2]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffa5 	bl	80001ac <DWT_Delay_us>
		for (int i = 0; i < tableSize; i++){
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	3301      	adds	r3, #1
 8000266:	60bb      	str	r3, [r7, #8]
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <stepFullDrive+0xa0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d3cc      	bcc.n	800020c <stepFullDrive+0x18>
	for (int s = 0; s < steps; s++){
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	3301      	adds	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	dbc2      	blt.n	8000206 <stepFullDrive+0x12>
		}
	}
}
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	40010c00 	.word	0x40010c00
 8000294:	20000010 	.word	0x20000010

08000298 <stepFullDriveReverse>:

void stepFullDriveReverse(int steps, uint16_t delay){
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	807b      	strh	r3, [r7, #2]
	for (int s = 0; s < steps; s++){
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e038      	b.n	800031c <stepFullDriveReverse+0x84>
			for (int i = tableSize - 1; i >= 0; i--){
 80002aa:	4b21      	ldr	r3, [pc, #132]	; (8000330 <stepFullDriveReverse+0x98>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	e02d      	b.n	8000310 <stepFullDriveReverse+0x78>
				HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, fullDriveTable[i][0]);
 80002b4:	4a1f      	ldr	r2, [pc, #124]	; (8000334 <stepFullDriveReverse+0x9c>)
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80002bc:	461a      	mov	r2, r3
 80002be:	2140      	movs	r1, #64	; 0x40
 80002c0:	481d      	ldr	r0, [pc, #116]	; (8000338 <stepFullDriveReverse+0xa0>)
 80002c2:	f000 fe56 	bl	8000f72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, fullDriveTable[i][1]);
 80002c6:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <stepFullDriveReverse+0x9c>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	785b      	ldrb	r3, [r3, #1]
 80002d0:	461a      	mov	r2, r3
 80002d2:	2120      	movs	r1, #32
 80002d4:	4818      	ldr	r0, [pc, #96]	; (8000338 <stepFullDriveReverse+0xa0>)
 80002d6:	f000 fe4c 	bl	8000f72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, fullDriveTable[i][2]);
 80002da:	4a16      	ldr	r2, [pc, #88]	; (8000334 <stepFullDriveReverse+0x9c>)
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	461a      	mov	r2, r3
 80002e6:	2110      	movs	r1, #16
 80002e8:	4813      	ldr	r0, [pc, #76]	; (8000338 <stepFullDriveReverse+0xa0>)
 80002ea:	f000 fe42 	bl	8000f72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, fullDriveTable[i][3]);
 80002ee:	4a11      	ldr	r2, [pc, #68]	; (8000334 <stepFullDriveReverse+0x9c>)
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	4413      	add	r3, r2
 80002f6:	78db      	ldrb	r3, [r3, #3]
 80002f8:	461a      	mov	r2, r3
 80002fa:	2108      	movs	r1, #8
 80002fc:	480e      	ldr	r0, [pc, #56]	; (8000338 <stepFullDriveReverse+0xa0>)
 80002fe:	f000 fe38 	bl	8000f72 <HAL_GPIO_WritePin>
				DWT_Delay_us(delay);
 8000302:	887b      	ldrh	r3, [r7, #2]
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff51 	bl	80001ac <DWT_Delay_us>
			for (int i = tableSize - 1; i >= 0; i--){
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	3b01      	subs	r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dace      	bge.n	80002b4 <stepFullDriveReverse+0x1c>
	for (int s = 0; s < steps; s++){
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	dbc2      	blt.n	80002aa <stepFullDriveReverse+0x12>
			}
		}
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000010 	.word	0x20000010
 8000334:	20000000 	.word	0x20000000
 8000338:	40010c00 	.word	0x40010c00

0800033c <receiveData>:


uint8_t count = 0;

uint32_t receiveData(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
	uint32_t code = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]

	int timeout = 50000;
 8000346:	f24c 3350 	movw	r3, #50000	; 0xc350
 800034a:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800034c:	4b3d      	ldr	r3, [pc, #244]	; (8000444 <receiveData+0x108>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2200      	movs	r2, #0
 8000352:	625a      	str	r2, [r3, #36]	; 0x24

	// waiting for the HIGH signal
	while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) && __HAL_TIM_GET_COUNTER(&htim1) < timeout);
 8000354:	bf00      	nop
 8000356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035a:	483b      	ldr	r0, [pc, #236]	; (8000448 <receiveData+0x10c>)
 800035c:	f000 fdf2 	bl	8000f44 <HAL_GPIO_ReadPin>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d105      	bne.n	8000372 <receiveData+0x36>
 8000366:	4b37      	ldr	r3, [pc, #220]	; (8000444 <receiveData+0x108>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d3f1      	bcc.n	8000356 <receiveData+0x1a>

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000372:	4b34      	ldr	r3, [pc, #208]	; (8000444 <receiveData+0x108>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	; 0x24

	// waiting for the LOW signal
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && __HAL_TIM_GET_COUNTER(&htim1) < timeout);
 800037a:	bf00      	nop
 800037c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000380:	4831      	ldr	r0, [pc, #196]	; (8000448 <receiveData+0x10c>)
 8000382:	f000 fddf 	bl	8000f44 <HAL_GPIO_ReadPin>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <receiveData+0x5c>
 800038c:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <receiveData+0x108>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	d3f1      	bcc.n	800037c <receiveData+0x40>

	// receiving the data,
	// 562.5us interval -> 0, 1.6ms interval -> 1
	for(int i = 0; i < 32; i++){
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	e04a      	b.n	8000434 <receiveData+0xf8>
		count = 0;
 800039e:	4b2b      	ldr	r3, [pc, #172]	; (800044c <receiveData+0x110>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <receiveData+0x108>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2200      	movs	r2, #0
 80003aa:	625a      	str	r2, [r3, #36]	; 0x24
		// waiting for the HIGH signal
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) && __HAL_TIM_GET_COUNTER(&htim1) < timeout);
 80003ac:	bf00      	nop
 80003ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b2:	4825      	ldr	r0, [pc, #148]	; (8000448 <receiveData+0x10c>)
 80003b4:	f000 fdc6 	bl	8000f44 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d105      	bne.n	80003ca <receiveData+0x8e>
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <receiveData+0x108>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d3f1      	bcc.n	80003ae <receiveData+0x72>

		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80003ca:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <receiveData+0x108>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
		// count the interval
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && __HAL_TIM_GET_COUNTER(&htim1) < timeout){
 80003d2:	e008      	b.n	80003e6 <receiveData+0xaa>
			count++;
 80003d4:	4b1d      	ldr	r3, [pc, #116]	; (800044c <receiveData+0x110>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <receiveData+0x110>)
 80003de:	701a      	strb	r2, [r3, #0]
			DWT_Delay_us(100);
 80003e0:	2064      	movs	r0, #100	; 0x64
 80003e2:	f7ff fee3 	bl	80001ac <DWT_Delay_us>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) && __HAL_TIM_GET_COUNTER(&htim1) < timeout){
 80003e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ea:	4817      	ldr	r0, [pc, #92]	; (8000448 <receiveData+0x10c>)
 80003ec:	f000 fdaa 	bl	8000f44 <HAL_GPIO_ReadPin>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d005      	beq.n	8000402 <receiveData+0xc6>
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <receiveData+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d3e8      	bcc.n	80003d4 <receiveData+0x98>
		}

		// check which bit should be assigned
		if(count > 12){
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <receiveData+0x110>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b0c      	cmp	r3, #12
 8000408:	d908      	bls.n	800041c <receiveData+0xe0>
			// write 1
			code |= (1UL << (31-i));
 800040a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	fa22 f303 	lsr.w	r3, r2, r3
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	4313      	orrs	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	e008      	b.n	800042e <receiveData+0xf2>
		} else {
			//write 0
			code &= ~(1UL << (31-i));
 800041c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	fa22 f303 	lsr.w	r3, r2, r3
 8000426:	43db      	mvns	r3, r3
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	4013      	ands	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 32; i++){
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	3301      	adds	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	2b1f      	cmp	r3, #31
 8000438:	ddb1      	ble.n	800039e <receiveData+0x62>
		}
	}
	return code;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000040 	.word	0x20000040
 8000448:	40010c00 	.word	0x40010c00
 800044c:	2000003c 	.word	0x2000003c

08000450 <checkForRepeat>:

int checkForRepeat(int time){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	DWT_Delay_us(time);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fea6 	bl	80001ac <DWT_Delay_us>

	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000460:	4b22      	ldr	r3, [pc, #136]	; (80004ec <checkForRepeat+0x9c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8000468:	e007      	b.n	800047a <checkForRepeat+0x2a>
		if (__HAL_TIM_GET_COUNTER(&htim1) > time){
 800046a:	4b20      	ldr	r3, [pc, #128]	; (80004ec <checkForRepeat+0x9c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	d901      	bls.n	800047a <checkForRepeat+0x2a>
			return 0;
 8000476:	2300      	movs	r3, #0
 8000478:	e034      	b.n	80004e4 <checkForRepeat+0x94>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 800047a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800047e:	481c      	ldr	r0, [pc, #112]	; (80004f0 <checkForRepeat+0xa0>)
 8000480:	f000 fd60 	bl	8000f44 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1ef      	bne.n	800046a <checkForRepeat+0x1a>
		}
	}
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <checkForRepeat+0x9c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
	while (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8000492:	e008      	b.n	80004a6 <checkForRepeat+0x56>
		if (__HAL_TIM_GET_COUNTER(&htim1) > 12000){
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <checkForRepeat+0x9c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800049e:	4293      	cmp	r3, r2
 80004a0:	d901      	bls.n	80004a6 <checkForRepeat+0x56>
			return 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	e01e      	b.n	80004e4 <checkForRepeat+0x94>
	while (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 80004a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004aa:	4811      	ldr	r0, [pc, #68]	; (80004f0 <checkForRepeat+0xa0>)
 80004ac:	f000 fd4a 	bl	8000f44 <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0ee      	beq.n	8000494 <checkForRepeat+0x44>
		}
	}
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <checkForRepeat+0x9c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 80004be:	e008      	b.n	80004d2 <checkForRepeat+0x82>
		if (__HAL_TIM_GET_COUNTER(&htim1) > 3000){
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <checkForRepeat+0x9c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d901      	bls.n	80004d2 <checkForRepeat+0x82>
			return 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	e008      	b.n	80004e4 <checkForRepeat+0x94>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 80004d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d6:	4806      	ldr	r0, [pc, #24]	; (80004f0 <checkForRepeat+0xa0>)
 80004d8:	f000 fd34 	bl	8000f44 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1ee      	bne.n	80004c0 <checkForRepeat+0x70>
		}
	}
	return 1;
 80004e2:	2301      	movs	r3, #1
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000040 	.word	0x20000040
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <convertCode>:


int convertCode(uint32_t code){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	switch (code){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <convertCode+0x2c>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d005      	beq.n	8000510 <convertCode+0x1c>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a07      	ldr	r2, [pc, #28]	; (8000524 <convertCode+0x30>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d103      	bne.n	8000514 <convertCode+0x20>
		case (0xFF30CF):
			return 1;
 800050c:	2301      	movs	r3, #1
 800050e:	e002      	b.n	8000516 <convertCode+0x22>
			break;

		case (0xFF18E7):
			return 2;
 8000510:	2302      	movs	r3, #2
 8000512:	e000      	b.n	8000516 <convertCode+0x22>
			break;

		default :
			return 0;
 8000514:	2300      	movs	r3, #0
			break;
	}
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	00ff18e7 	.word	0x00ff18e7
 8000524:	00ff30cf 	.word	0x00ff30cf

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fa25 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f881 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f915 	bl	8000764 <MX_GPIO_Init>
  MX_TIM1_Init();
 800053a:	f000 f8c3 	bl	80006c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800053e:	483c      	ldr	r0, [pc, #240]	; (8000630 <main+0x108>)
 8000540:	f001 f972 	bl	8001828 <HAL_TIM_Base_Start>
  DWT_Delay_Init();
 8000544:	f7ff fe02 	bl	800014c <DWT_Delay_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int buttonCounterClockWise, buttonClockWise;
  int convertedData = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  int shouldRepeat;
  while (1)
  {

	// infra-red control logic
	if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 800054c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000550:	4838      	ldr	r0, [pc, #224]	; (8000634 <main+0x10c>)
 8000552:	f000 fcf7 	bl	8000f44 <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13d      	bne.n	80005d8 <main+0xb0>
		data = receiveData();
 800055c:	f7ff feee 	bl	800033c <receiveData>
 8000560:	6078      	str	r0, [r7, #4]

		convertedData = convertCode(data);
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff ffc6 	bl	80004f4 <convertCode>
 8000568:	60b8      	str	r0, [r7, #8]

		if (convertedData == 1){
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d118      	bne.n	80005a2 <main+0x7a>
			shouldRepeat = checkForRepeat(40000);
 8000570:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000574:	f7ff ff6c 	bl	8000450 <checkForRepeat>
 8000578:	60f8      	str	r0, [r7, #12]
			while (shouldRepeat){
 800057a:	e009      	b.n	8000590 <main+0x68>
				stepFullDrive(5, 3000);
 800057c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000580:	2005      	movs	r0, #5
 8000582:	f7ff fe37 	bl	80001f4 <stepFullDrive>
				shouldRepeat = checkForRepeat(30000);
 8000586:	f247 5030 	movw	r0, #30000	; 0x7530
 800058a:	f7ff ff61 	bl	8000450 <checkForRepeat>
 800058e:	60f8      	str	r0, [r7, #12]
			while (shouldRepeat){
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f2      	bne.n	800057c <main+0x54>
			}

			convertedData = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
			HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 fa50 	bl	8000a40 <HAL_Delay>
 80005a0:	e01a      	b.n	80005d8 <main+0xb0>
		}
		else if (convertedData == 2){
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d117      	bne.n	80005d8 <main+0xb0>
			shouldRepeat = checkForRepeat(40000);
 80005a8:	f649 4040 	movw	r0, #40000	; 0x9c40
 80005ac:	f7ff ff50 	bl	8000450 <checkForRepeat>
 80005b0:	60f8      	str	r0, [r7, #12]
			while (shouldRepeat){
 80005b2:	e009      	b.n	80005c8 <main+0xa0>
				stepFullDriveReverse(5, 3000);
 80005b4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80005b8:	2005      	movs	r0, #5
 80005ba:	f7ff fe6d 	bl	8000298 <stepFullDriveReverse>
				shouldRepeat = checkForRepeat(30000);
 80005be:	f247 5030 	movw	r0, #30000	; 0x7530
 80005c2:	f7ff ff45 	bl	8000450 <checkForRepeat>
 80005c6:	60f8      	str	r0, [r7, #12]
			while (shouldRepeat){
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f2      	bne.n	80005b4 <main+0x8c>
			}
			convertedData = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
			HAL_Delay(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 fa34 	bl	8000a40 <HAL_Delay>
		}
	}

	// button control logic
	buttonCounterClockWise = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005d8:	2101      	movs	r1, #1
 80005da:	4816      	ldr	r0, [pc, #88]	; (8000634 <main+0x10c>)
 80005dc:	f000 fcb2 	bl	8000f44 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	617b      	str	r3, [r7, #20]
	buttonClockWise = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80005e4:	2102      	movs	r1, #2
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <main+0x10c>)
 80005e8:	f000 fcac 	bl	8000f44 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	613b      	str	r3, [r7, #16]

	while(!buttonCounterClockWise){
 80005f0:	e00a      	b.n	8000608 <main+0xe0>
	  stepFullDrive(1, 3500);
 80005f2:	f640 51ac 	movw	r1, #3500	; 0xdac
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fdfc 	bl	80001f4 <stepFullDrive>
	  buttonCounterClockWise = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005fc:	2101      	movs	r1, #1
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <main+0x10c>)
 8000600:	f000 fca0 	bl	8000f44 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	617b      	str	r3, [r7, #20]
	while(!buttonCounterClockWise){
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f1      	beq.n	80005f2 <main+0xca>
	}

	while(!buttonClockWise){
 800060e:	e00a      	b.n	8000626 <main+0xfe>
		stepFullDriveReverse(1, 3500);
 8000610:	f640 51ac 	movw	r1, #3500	; 0xdac
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff fe3f 	bl	8000298 <stepFullDriveReverse>
		buttonClockWise = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800061a:	2102      	movs	r1, #2
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0x10c>)
 800061e:	f000 fc91 	bl	8000f44 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	613b      	str	r3, [r7, #16]
	while(!buttonClockWise){
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0f1      	beq.n	8000610 <main+0xe8>
	if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 800062c:	e78e      	b.n	800054c <main+0x24>
 800062e:	bf00      	nop
 8000630:	20000040 	.word	0x20000040
 8000634:	40010c00 	.word	0x40010c00

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2228      	movs	r2, #40	; 0x28
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fb60 	bl	8001d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000676:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0318 	add.w	r3, r7, #24
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fc8f 	bl	8000fa4 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800068c:	f000 f8cc 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fefa 	bl	80014a4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006b6:	f000 f8b7 	bl	8000828 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3740      	adds	r7, #64	; 0x40
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_TIM1_Init+0x98>)
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <MX_TIM1_Init+0x9c>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_TIM1_Init+0x98>)
 80006e8:	2248      	movs	r2, #72	; 0x48
 80006ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_TIM1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_TIM1_Init+0x98>)
 80006f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_TIM1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_TIM1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM1_Init+0x98>)
 800070e:	f001 f83b 	bl	8001788 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000718:	f000 f886 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_TIM1_Init+0x98>)
 800072a:	f001 f8c1 	bl	80018b0 <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000734:	f000 f878 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_TIM1_Init+0x98>)
 8000746:	f001 fa65 	bl	8001c14 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000750:	f000 f86a 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000040 	.word	0x20000040
 8000760:	40012c00 	.word	0x40012c00

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_GPIO_Init+0xbc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <MX_GPIO_Init+0xbc>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_GPIO_Init+0xbc>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0320 	and.w	r3, r3, #32
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_GPIO_Init+0xbc>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <MX_GPIO_Init+0xbc>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_GPIO_Init+0xbc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0xbc>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_GPIO_Init+0xbc>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_GPIO_Init+0xbc>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2178      	movs	r1, #120	; 0x78
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_GPIO_Init+0xc0>)
 80007c6:	f000 fbd4 	bl	8000f72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ca:	2303      	movs	r3, #3
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_GPIO_Init+0xc0>)
 80007de:	f000 fa37 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0xc0>)
 80007f8:	f000 fa2a 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007fc:	2378      	movs	r3, #120	; 0x78
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0xc0>)
 8000814:	f000 fa1c 	bl	8000c50 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	40010c00 	.word	0x40010c00

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_MspInit+0x5c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x5c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_MspInit+0x60>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_MspInit+0x60>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	40010000 	.word	0x40010000

08000898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <HAL_TIM_Base_MspInit+0x34>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10b      	bne.n	80008c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_TIM_Base_MspInit+0x38>)
 80008b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_TIM_Base_MspInit+0x38>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f875 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}

08000922 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
	...

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000956:	f7ff ffe4 	bl	8000922 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 f9b3 	bl	8001cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fde3 	bl	8000528 <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800096c:	08001d5c 	.word	0x08001d5c
  ldr r2, =_sbss
 8000970:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000974:	2000008c 	.word	0x2000008c

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f92b 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff ff4c 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f935 	bl	8000c36 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f90b 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000014 	.word	0x20000014
 8000a00:	2000001c 	.word	0x2000001c
 8000a04:	20000018 	.word	0x20000018

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	2000001c 	.word	0x2000001c
 8000a28:	20000088 	.word	0x20000088

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000088 	.word	0x20000088

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000001c 	.word	0x2000001c

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff49 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b08b      	sub	sp, #44	; 0x2c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e148      	b.n	8000ef6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c64:	2201      	movs	r2, #1
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f040 8137 	bne.w	8000ef0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4aa3      	ldr	r2, [pc, #652]	; (8000f14 <HAL_GPIO_Init+0x2c4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d05e      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000c8c:	4aa1      	ldr	r2, [pc, #644]	; (8000f14 <HAL_GPIO_Init+0x2c4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d875      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000c92:	4aa1      	ldr	r2, [pc, #644]	; (8000f18 <HAL_GPIO_Init+0x2c8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d058      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000c98:	4a9f      	ldr	r2, [pc, #636]	; (8000f18 <HAL_GPIO_Init+0x2c8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d86f      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000c9e:	4a9f      	ldr	r2, [pc, #636]	; (8000f1c <HAL_GPIO_Init+0x2cc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d052      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000ca4:	4a9d      	ldr	r2, [pc, #628]	; (8000f1c <HAL_GPIO_Init+0x2cc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d869      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000caa:	4a9d      	ldr	r2, [pc, #628]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d04c      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000cb0:	4a9b      	ldr	r2, [pc, #620]	; (8000f20 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d863      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cb6:	4a9b      	ldr	r2, [pc, #620]	; (8000f24 <HAL_GPIO_Init+0x2d4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d046      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
 8000cbc:	4a99      	ldr	r2, [pc, #612]	; (8000f24 <HAL_GPIO_Init+0x2d4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d85d      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d82a      	bhi.n	8000d1c <HAL_GPIO_Init+0xcc>
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d859      	bhi.n	8000d7e <HAL_GPIO_Init+0x12e>
 8000cca:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <HAL_GPIO_Init+0x80>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000d4b 	.word	0x08000d4b
 8000cd4:	08000d25 	.word	0x08000d25
 8000cd8:	08000d37 	.word	0x08000d37
 8000cdc:	08000d79 	.word	0x08000d79
 8000ce0:	08000d7f 	.word	0x08000d7f
 8000ce4:	08000d7f 	.word	0x08000d7f
 8000ce8:	08000d7f 	.word	0x08000d7f
 8000cec:	08000d7f 	.word	0x08000d7f
 8000cf0:	08000d7f 	.word	0x08000d7f
 8000cf4:	08000d7f 	.word	0x08000d7f
 8000cf8:	08000d7f 	.word	0x08000d7f
 8000cfc:	08000d7f 	.word	0x08000d7f
 8000d00:	08000d7f 	.word	0x08000d7f
 8000d04:	08000d7f 	.word	0x08000d7f
 8000d08:	08000d7f 	.word	0x08000d7f
 8000d0c:	08000d7f 	.word	0x08000d7f
 8000d10:	08000d7f 	.word	0x08000d7f
 8000d14:	08000d2d 	.word	0x08000d2d
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	4a82      	ldr	r2, [pc, #520]	; (8000f28 <HAL_GPIO_Init+0x2d8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d22:	e02c      	b.n	8000d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e029      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	3304      	adds	r3, #4
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e024      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e01f      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	330c      	adds	r3, #12
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e01a      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d52:	2304      	movs	r3, #4
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e013      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d105      	bne.n	8000d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d60:	2308      	movs	r3, #8
 8000d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	611a      	str	r2, [r3, #16]
          break;
 8000d6a:	e009      	b.n	8000d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	615a      	str	r2, [r3, #20]
          break;
 8000d76:	e003      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_Init+0x130>
          break;
 8000d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d801      	bhi.n	8000d8a <HAL_GPIO_Init+0x13a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <HAL_GPIO_Init+0x13e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2bff      	cmp	r3, #255	; 0xff
 8000d94:	d802      	bhi.n	8000d9c <HAL_GPIO_Init+0x14c>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x152>
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	3b08      	subs	r3, #8
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	210f      	movs	r1, #15
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	6a39      	ldr	r1, [r7, #32]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8090 	beq.w	8000ef0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd0:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <HAL_GPIO_Init+0x2dc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a55      	ldr	r2, [pc, #340]	; (8000f2c <HAL_GPIO_Init+0x2dc>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_GPIO_Init+0x2dc>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de8:	4a51      	ldr	r2, [pc, #324]	; (8000f30 <HAL_GPIO_Init+0x2e0>)
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <HAL_GPIO_Init+0x2e4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d00d      	beq.n	8000e30 <HAL_GPIO_Init+0x1e0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_GPIO_Init+0x2e8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0x1dc>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a47      	ldr	r2, [pc, #284]	; (8000f3c <HAL_GPIO_Init+0x2ec>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_GPIO_Init+0x1d8>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e004      	b.n	8000e32 <HAL_GPIO_Init+0x1e2>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x1e2>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_GPIO_Init+0x1e2>
 8000e30:	2300      	movs	r3, #0
 8000e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	4093      	lsls	r3, r2
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e42:	493b      	ldr	r1, [pc, #236]	; (8000f30 <HAL_GPIO_Init+0x2e0>)
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4937      	ldr	r1, [pc, #220]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4933      	ldr	r1, [pc, #204]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	492d      	ldr	r1, [pc, #180]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	604b      	str	r3, [r1, #4]
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4929      	ldr	r1, [pc, #164]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	4923      	ldr	r1, [pc, #140]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	608b      	str	r3, [r1, #8]
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	491f      	ldr	r1, [pc, #124]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	4919      	ldr	r1, [pc, #100]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60cb      	str	r3, [r1, #12]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4915      	ldr	r1, [pc, #84]	; (8000f40 <HAL_GPIO_Init+0x2f0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f47f aeaf 	bne.w	8000c64 <HAL_GPIO_Init+0x14>
  }
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	372c      	adds	r7, #44	; 0x2c
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	10320000 	.word	0x10320000
 8000f18:	10310000 	.word	0x10310000
 8000f1c:	10220000 	.word	0x10220000
 8000f20:	10210000 	.word	0x10210000
 8000f24:	10120000 	.word	0x10120000
 8000f28:	10110000 	.word	0x10110000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	807b      	strh	r3, [r7, #2]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f82:	787b      	ldrb	r3, [r7, #1]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f88:	887a      	ldrh	r2, [r7, #2]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f8e:	e003      	b.n	8000f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	041a      	lsls	r2, r3, #16
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e26c      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8087 	beq.w	80010d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc4:	4b92      	ldr	r3, [pc, #584]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d00c      	beq.n	8000fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd0:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d112      	bne.n	8001002 <HAL_RCC_OscConfig+0x5e>
 8000fdc:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d10b      	bne.n	8001002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fea:	4b89      	ldr	r3, [pc, #548]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d06c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x12c>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d168      	bne.n	80010d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e246      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x76>
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a7f      	ldr	r2, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e02e      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x98>
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a77      	ldr	r2, [pc, #476]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0xbc>
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 8001060:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a6a      	ldr	r2, [pc, #424]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a67      	ldr	r2, [pc, #412]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fcd4 	bl	8000a2c <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fcd0 	bl	8000a2c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1fa      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0xe4>
 80010a6:	e014      	b.n	80010d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcc0 	bl	8000a2c <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcbc 	bl	8000a2c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1e6      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x10c>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d063      	beq.n	80011a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d11c      	bne.n	8001130 <HAL_RCC_OscConfig+0x18c>
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d116      	bne.n	8001130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e1ba      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4939      	ldr	r1, [pc, #228]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	e03a      	b.n	80011a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_RCC_OscConfig+0x270>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc75 	bl	8000a2c <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc71 	bl	8000a2c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e19b      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4927      	ldr	r1, [pc, #156]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_RCC_OscConfig+0x270>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc54 	bl	8000a2c <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fc50 	bl	8000a2c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e17a      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d03a      	beq.n	8001228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d019      	beq.n	80011ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_RCC_OscConfig+0x274>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc34 	bl	8000a2c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc30 	bl	8000a2c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e15a      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 fab0 	bl	800174c <RCC_Delay>
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_RCC_OscConfig+0x274>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fc1a 	bl	8000a2c <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fa:	e00f      	b.n	800121c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc16 	bl	8000a2c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d908      	bls.n	800121c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e140      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	42420000 	.word	0x42420000
 8001218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4b9e      	ldr	r3, [pc, #632]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e9      	bne.n	80011fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a6 	beq.w	8001382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123a:	4b97      	ldr	r3, [pc, #604]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10d      	bne.n	8001262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b94      	ldr	r3, [pc, #592]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a93      	ldr	r2, [pc, #588]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b91      	ldr	r3, [pc, #580]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b8e      	ldr	r3, [pc, #568]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a8a      	ldr	r2, [pc, #552]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fbd7 	bl	8000a2c <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001282:	f7ff fbd3 	bl	8000a2c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0fd      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x4f8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x312>
 80012a8:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a7a      	ldr	r2, [pc, #488]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	e02d      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x334>
 80012be:	4b76      	ldr	r3, [pc, #472]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a75      	ldr	r2, [pc, #468]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a72      	ldr	r2, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	e01c      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d10c      	bne.n	80012fa <HAL_RCC_OscConfig+0x356>
 80012e0:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a6c      	ldr	r2, [pc, #432]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a69      	ldr	r2, [pc, #420]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6213      	str	r3, [r2, #32]
 80012f8:	e00b      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a66      	ldr	r2, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a63      	ldr	r2, [pc, #396]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d015      	beq.n	8001346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb87 	bl	8000a2c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb83 	bl	8000a2c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0ab      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ee      	beq.n	8001322 <HAL_RCC_OscConfig+0x37e>
 8001344:	e014      	b.n	8001370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fb71 	bl	8000a2c <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff fb6d 	bl	8000a2c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e095      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d105      	bne.n	8001382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001376:	4b48      	ldr	r3, [pc, #288]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a47      	ldr	r2, [pc, #284]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8081 	beq.w	800148e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d061      	beq.n	800145c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d146      	bne.n	800142e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_RCC_OscConfig+0x4fc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb41 	bl	8000a2c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fb3d 	bl	8000a2c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e067      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	492d      	ldr	r1, [pc, #180]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a19      	ldr	r1, [r3, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	430b      	orrs	r3, r1
 80013fa:	4927      	ldr	r1, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x4fc>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fb11 	bl	8000a2c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fb0d 	bl	8000a2c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e037      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x46a>
 800142c:	e02f      	b.n	800148e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_RCC_OscConfig+0x4fc>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fafa 	bl	8000a2c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff faf6 	bl	8000a2c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e020      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x498>
 800145a:	e018      	b.n	800148e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	429a      	cmp	r2, r3
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40007000 	.word	0x40007000
 80014a0:	42420060 	.word	0x42420060

080014a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0d0      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d910      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 0207 	bic.w	r2, r3, #7
 80014ce:	4965      	ldr	r1, [pc, #404]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0b8      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800150a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	494d      	ldr	r1, [pc, #308]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d040      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d115      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e073      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06b      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4936      	ldr	r1, [pc, #216]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff fa4a 	bl	8000a2c <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff fa46 	bl	8000a2c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e053      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d210      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 0207 	bic.w	r2, r3, #7
 80015da:	4922      	ldr	r1, [pc, #136]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e032      	b.n	800165a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4916      	ldr	r1, [pc, #88]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001632:	f000 f821 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1cc>)
 800164c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1d0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f9a8 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000
 8001668:	40021000 	.word	0x40021000
 800166c:	08001d44 	.word	0x08001d44
 8001670:	20000014 	.word	0x20000014
 8001674:	20000018 	.word	0x20000018

08001678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001678:	b490      	push	{r4, r7}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001680:	1d3c      	adds	r4, r7, #4
 8001682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001688:	f240 2301 	movw	r3, #513	; 0x201
 800168c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d002      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x40>
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d003      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x46>
 80016b6:	e02d      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ba:	623b      	str	r3, [r7, #32]
      break;
 80016bc:	e02d      	b.n	800171a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	0c9b      	lsrs	r3, r3, #18
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ca:	4413      	add	r3, r2
 80016cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0c5b      	lsrs	r3, r3, #17
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ea:	4413      	add	r3, r2
 80016ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f6:	fb02 f203 	mul.w	r2, r2, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	e004      	b.n	800170e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	623b      	str	r3, [r7, #32]
      break;
 8001712:	e002      	b.n	800171a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001716:	623b      	str	r3, [r7, #32]
      break;
 8001718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800171a:	6a3b      	ldr	r3, [r7, #32]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bc90      	pop	{r4, r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	08001d34 	.word	0x08001d34
 800172c:	40021000 	.word	0x40021000
 8001730:	007a1200 	.word	0x007a1200
 8001734:	003d0900 	.word	0x003d0900

08001738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <HAL_RCC_GetHCLKFreq+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000014 	.word	0x20000014

0800174c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <RCC_Delay+0x34>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <RCC_Delay+0x38>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a5b      	lsrs	r3, r3, #9
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001768:	bf00      	nop
  }
  while (Delay --);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	60fa      	str	r2, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f9      	bne.n	8001768 <RCC_Delay+0x1c>
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000014 	.word	0x20000014
 8001784:	10624dd3 	.word	0x10624dd3

08001788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e041      	b.n	800181e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff f872 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f000 f936 	bl	8001a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d001      	beq.n	8001840 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e02d      	b.n	800189c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <HAL_TIM_Base_Start+0x80>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_TIM_Base_Start+0x3e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185a:	d004      	beq.n	8001866 <HAL_TIM_Base_Start+0x3e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_TIM_Base_Start+0x84>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d111      	bne.n	800188a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b06      	cmp	r3, #6
 8001876:	d010      	beq.n	800189a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001888:	e007      	b.n	800189a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40012c00 	.word	0x40012c00
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_TIM_ConfigClockSource+0x18>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e0b3      	b.n	8001a30 <HAL_TIM_ConfigClockSource+0x180>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80018e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001900:	d03e      	beq.n	8001980 <HAL_TIM_ConfigClockSource+0xd0>
 8001902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001906:	f200 8087 	bhi.w	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 800190a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190e:	f000 8085 	beq.w	8001a1c <HAL_TIM_ConfigClockSource+0x16c>
 8001912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001916:	d87f      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001918:	2b70      	cmp	r3, #112	; 0x70
 800191a:	d01a      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0xa2>
 800191c:	2b70      	cmp	r3, #112	; 0x70
 800191e:	d87b      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001920:	2b60      	cmp	r3, #96	; 0x60
 8001922:	d050      	beq.n	80019c6 <HAL_TIM_ConfigClockSource+0x116>
 8001924:	2b60      	cmp	r3, #96	; 0x60
 8001926:	d877      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001928:	2b50      	cmp	r3, #80	; 0x50
 800192a:	d03c      	beq.n	80019a6 <HAL_TIM_ConfigClockSource+0xf6>
 800192c:	2b50      	cmp	r3, #80	; 0x50
 800192e:	d873      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001930:	2b40      	cmp	r3, #64	; 0x40
 8001932:	d058      	beq.n	80019e6 <HAL_TIM_ConfigClockSource+0x136>
 8001934:	2b40      	cmp	r3, #64	; 0x40
 8001936:	d86f      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001938:	2b30      	cmp	r3, #48	; 0x30
 800193a:	d064      	beq.n	8001a06 <HAL_TIM_ConfigClockSource+0x156>
 800193c:	2b30      	cmp	r3, #48	; 0x30
 800193e:	d86b      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001940:	2b20      	cmp	r3, #32
 8001942:	d060      	beq.n	8001a06 <HAL_TIM_ConfigClockSource+0x156>
 8001944:	2b20      	cmp	r3, #32
 8001946:	d867      	bhi.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
 8001948:	2b00      	cmp	r3, #0
 800194a:	d05c      	beq.n	8001a06 <HAL_TIM_ConfigClockSource+0x156>
 800194c:	2b10      	cmp	r3, #16
 800194e:	d05a      	beq.n	8001a06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001950:	e062      	b.n	8001a18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6899      	ldr	r1, [r3, #8]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f000 f938 	bl	8001bd6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001974:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	609a      	str	r2, [r3, #8]
      break;
 800197e:	e04e      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f000 f921 	bl	8001bd6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a2:	609a      	str	r2, [r3, #8]
      break;
 80019a4:	e03b      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f000 f898 	bl	8001ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2150      	movs	r1, #80	; 0x50
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f8ef 	bl	8001ba2 <TIM_ITRx_SetConfig>
      break;
 80019c4:	e02b      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f000 f8b6 	bl	8001b44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2160      	movs	r1, #96	; 0x60
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f8df 	bl	8001ba2 <TIM_ITRx_SetConfig>
      break;
 80019e4:	e01b      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6859      	ldr	r1, [r3, #4]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	461a      	mov	r2, r3
 80019f4:	f000 f878 	bl	8001ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f8cf 	bl	8001ba2 <TIM_ITRx_SetConfig>
      break;
 8001a04:	e00b      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 f8c6 	bl	8001ba2 <TIM_ITRx_SetConfig>
        break;
 8001a16:	e002      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a18:	bf00      	nop
 8001a1a:	e000      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <TIM_Base_SetConfig+0xa8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d007      	beq.n	8001a60 <TIM_Base_SetConfig+0x28>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a56:	d003      	beq.n	8001a60 <TIM_Base_SetConfig+0x28>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <TIM_Base_SetConfig+0xac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d108      	bne.n	8001a72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <TIM_Base_SetConfig+0xa8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <TIM_Base_SetConfig+0x52>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a80:	d003      	beq.n	8001a8a <TIM_Base_SetConfig+0x52>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <TIM_Base_SetConfig+0xac>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d108      	bne.n	8001a9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <TIM_Base_SetConfig+0xa8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d103      	bne.n	8001ad0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	615a      	str	r2, [r3, #20]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	f023 0201 	bic.w	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f023 030a 	bic.w	r3, r3, #10
 8001b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	621a      	str	r2, [r3, #32]
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f023 0210 	bic.w	r2, r3, #16
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	031b      	lsls	r3, r3, #12
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	621a      	str	r2, [r3, #32]
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f043 0307 	orr.w	r3, r3, #7
 8001bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b087      	sub	sp, #28
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	021a      	lsls	r2, r3, #8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	609a      	str	r2, [r3, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e041      	b.n	8001cb0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d009      	beq.n	8001c84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d004      	beq.n	8001c84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d10c      	bne.n	8001c9e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <__libc_init_array>:
 8001cc4:	b570      	push	{r4, r5, r6, lr}
 8001cc6:	2600      	movs	r6, #0
 8001cc8:	4d0c      	ldr	r5, [pc, #48]	; (8001cfc <__libc_init_array+0x38>)
 8001cca:	4c0d      	ldr	r4, [pc, #52]	; (8001d00 <__libc_init_array+0x3c>)
 8001ccc:	1b64      	subs	r4, r4, r5
 8001cce:	10a4      	asrs	r4, r4, #2
 8001cd0:	42a6      	cmp	r6, r4
 8001cd2:	d109      	bne.n	8001ce8 <__libc_init_array+0x24>
 8001cd4:	f000 f822 	bl	8001d1c <_init>
 8001cd8:	2600      	movs	r6, #0
 8001cda:	4d0a      	ldr	r5, [pc, #40]	; (8001d04 <__libc_init_array+0x40>)
 8001cdc:	4c0a      	ldr	r4, [pc, #40]	; (8001d08 <__libc_init_array+0x44>)
 8001cde:	1b64      	subs	r4, r4, r5
 8001ce0:	10a4      	asrs	r4, r4, #2
 8001ce2:	42a6      	cmp	r6, r4
 8001ce4:	d105      	bne.n	8001cf2 <__libc_init_array+0x2e>
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cec:	4798      	blx	r3
 8001cee:	3601      	adds	r6, #1
 8001cf0:	e7ee      	b.n	8001cd0 <__libc_init_array+0xc>
 8001cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf6:	4798      	blx	r3
 8001cf8:	3601      	adds	r6, #1
 8001cfa:	e7f2      	b.n	8001ce2 <__libc_init_array+0x1e>
 8001cfc:	08001d54 	.word	0x08001d54
 8001d00:	08001d54 	.word	0x08001d54
 8001d04:	08001d54 	.word	0x08001d54
 8001d08:	08001d58 	.word	0x08001d58

08001d0c <memset>:
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4402      	add	r2, r0
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d100      	bne.n	8001d16 <memset+0xa>
 8001d14:	4770      	bx	lr
 8001d16:	f803 1b01 	strb.w	r1, [r3], #1
 8001d1a:	e7f9      	b.n	8001d10 <memset+0x4>

08001d1c <_init>:
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1e:	bf00      	nop
 8001d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d22:	bc08      	pop	{r3}
 8001d24:	469e      	mov	lr, r3
 8001d26:	4770      	bx	lr

08001d28 <_fini>:
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	bf00      	nop
 8001d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2e:	bc08      	pop	{r3}
 8001d30:	469e      	mov	lr, r3
 8001d32:	4770      	bx	lr
